/* The following code was generated by JFlex 1.6.1 */

package proyectocompi.jflex;
import static proyectocompi.jflex.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/esporras/Documents/NetBeansProjects/ProyectoCompi/src/proyectocompi/jflex/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\14\1\61\1\61\1\61\22\0\1\54\1\45\1\60\2\0"+
    "\1\43\1\50\1\57\1\55\1\55\1\7\1\12\1\52\1\4\1\10"+
    "\1\42\12\3\1\53\1\0\1\46\1\44\1\47\2\0\4\2\1\11"+
    "\4\2\1\13\1\2\1\6\16\2\1\56\1\2\1\56\1\51\1\2"+
    "\1\2\1\15\1\22\1\24\1\32\1\17\1\33\1\37\1\41\1\30"+
    "\1\13\1\23\1\25\1\36\1\27\1\26\1\34\1\2\1\20\1\16"+
    "\1\21\1\31\1\2\1\40\1\5\1\35\1\2\1\55\1\50\1\55"+
    "\1\50\6\0\1\61\u05da\0\12\1\206\0\12\1\306\0\12\1\u019c\0"+
    "\12\1\166\0\12\1\166\0\12\1\166\0\12\1\166\0\12\1\166\0"+
    "\12\1\166\0\12\1\166\0\12\1\166\0\12\1\166\0\12\1\140\0"+
    "\12\1\166\0\12\1\106\0\12\1\u0116\0\12\1\106\0\12\1\u0746\0"+
    "\12\1\46\0\12\1\u012c\0\12\1\200\0\12\1\246\0\12\1\6\0"+
    "\12\1\266\0\12\1\126\0\12\1\206\0\12\1\6\0\12\1\u03ce\0"+
    "\1\61\1\61\u85f6\0\12\1\u02a6\0\12\1\46\0\12\1\306\0\12\1"+
    "\26\0\12\1\126\0\12\1\u0196\0\12\1\u5316\0\12\1\u0586\0\12\1"+
    "\u0bbc\0\12\1\200\0\12\1\74\0\12\1\220\0\12\1\u0116\0\12\1"+
    "\u01d6\0\12\1\u0176\0\12\1\146\0\12\1\u0216\0\12\1\u5176\0\12\1"+
    "\346\0\12\1\u6c74\0\62\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\2\3\1\1\1\3\1\4"+
    "\20\1\1\3\1\5\1\1\2\6\2\7\1\10\1\11"+
    "\1\4\2\12\2\1\2\13\1\0\1\14\1\13\1\15"+
    "\1\2\1\0\1\5\1\0\13\15\1\16\1\15\1\17"+
    "\1\20\13\15\1\6\1\21\1\0\1\22\1\0\1\22"+
    "\1\2\1\0\1\14\1\23\2\0\1\24\1\14\2\0"+
    "\23\15\1\22\2\0\1\14\1\0\1\2\1\14\12\15"+
    "\1\0\2\14\1\0\1\14\5\15\1\0\1\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\62\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u04e2\0\u0514\0\u0546\0\62\0\226"+
    "\0\62\0\62\0\u0578\0\62\0\226\0\u05aa\0\u05dc\0\u060e"+
    "\0\u0640\0\u0672\0\u06a4\0\u06d6\0\226\0\u0708\0\u012c\0\62"+
    "\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898"+
    "\0\u08ca\0\u08fc\0\u092e\0\u0960\0\226\0\u0992\0\226\0\226"+
    "\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22"+
    "\0\u0b54\0\u0b86\0\u0bb8\0\62\0\62\0\u0bea\0\u0c1c\0\u05dc"+
    "\0\u05dc\0\u0c4e\0\u0c80\0\u0cb2\0\62\0\u0ce4\0\u0d16\0\62"+
    "\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6"+
    "\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036"+
    "\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\62\0\u1194"+
    "\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324"+
    "\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4"+
    "\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644"+
    "\0\u1676\0\u16a8\0\u16da";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\2\4\1\6\1\7"+
    "\1\4\1\10\1\4\1\11\1\12\1\4\1\13\1\14"+
    "\1\15\1\16\1\4\1\17\1\20\1\21\1\22\1\23"+
    "\1\4\1\24\1\25\1\26\1\27\1\4\1\30\1\31"+
    "\1\4\1\32\1\10\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\64\0\1\3\1\50\1\3\1\0\1\51\1\50\1\52"+
    "\1\53\1\54\1\0\1\50\1\0\2\50\1\54\22\50"+
    "\7\0\1\50\4\0\1\50\5\0\2\55\1\0\2\55"+
    "\2\0\1\55\1\0\1\55\1\0\25\55\7\0\1\55"+
    "\4\0\1\55\4\0\1\56\1\0\1\56\4\0\1\57"+
    "\33\0\1\60\24\0\1\10\34\0\1\60\16\0\1\61"+
    "\1\0\1\61\122\0\1\60\17\0\2\55\1\0\2\55"+
    "\2\0\1\55\1\0\1\55\1\0\1\55\1\62\10\55"+
    "\1\63\12\55\7\0\1\55\4\0\1\55\5\0\2\55"+
    "\1\0\1\64\1\55\2\0\1\55\1\0\1\55\1\0"+
    "\10\55\1\65\14\55\7\0\1\55\4\0\1\55\5\0"+
    "\2\55\1\0\2\55\2\0\1\55\1\0\1\55\1\0"+
    "\1\66\1\55\1\67\22\55\7\0\1\55\4\0\1\55"+
    "\5\0\2\55\1\0\2\55\2\0\1\55\1\0\1\55"+
    "\1\0\3\55\1\70\21\55\7\0\1\55\4\0\1\55"+
    "\5\0\2\55\1\0\2\55\2\0\1\55\1\0\1\55"+
    "\1\0\3\55\1\71\21\55\7\0\1\55\4\0\1\55"+
    "\5\0\2\55\1\0\2\55\2\0\1\55\1\0\1\55"+
    "\1\0\10\55\1\72\1\73\13\55\7\0\1\55\4\0"+
    "\1\55\5\0\2\55\1\0\2\55\2\0\1\55\1\0"+
    "\1\55\1\0\1\74\24\55\7\0\1\55\4\0\1\55"+
    "\5\0\2\55\1\0\2\55\2\0\1\55\1\0\1\55"+
    "\1\0\3\55\1\75\21\55\7\0\1\55\4\0\1\55"+
    "\5\0\2\55\1\0\2\55\2\0\1\55\1\0\1\55"+
    "\1\0\11\55\1\76\13\55\7\0\1\55\4\0\1\55"+
    "\5\0\2\55\1\0\2\55\2\0\1\55\1\0\1\55"+
    "\1\0\1\55\1\77\10\55\1\77\3\55\1\100\2\55"+
    "\1\101\3\55\7\0\1\55\4\0\1\55\5\0\2\55"+
    "\1\0\2\55\2\0\1\55\1\0\1\55\1\0\2\55"+
    "\1\102\22\55\7\0\1\55\4\0\1\55\5\0\2\55"+
    "\1\0\2\55\2\0\1\55\1\0\1\55\1\0\3\55"+
    "\1\103\5\55\1\104\1\55\1\105\11\55\7\0\1\55"+
    "\4\0\1\55\5\0\2\55\1\0\2\55\2\0\1\55"+
    "\1\0\1\55\1\0\1\106\2\55\1\107\21\55\7\0"+
    "\1\55\4\0\1\55\5\0\2\55\1\0\2\55\2\0"+
    "\1\55\1\0\1\55\1\0\13\55\1\110\11\55\7\0"+
    "\1\55\4\0\1\55\5\0\2\55\1\0\2\55\2\0"+
    "\1\55\1\0\1\55\1\0\10\55\1\111\14\55\7\0"+
    "\1\55\4\0\1\55\5\0\2\55\1\0\2\55\2\0"+
    "\1\55\1\0\1\55\1\0\13\55\1\112\10\55\1\113"+
    "\7\0\1\55\4\0\1\55\45\0\1\10\1\0\1\60"+
    "\61\0\1\114\61\0\1\114\1\0\1\37\1\114\56\0"+
    "\1\114\2\0\1\37\66\0\1\115\5\0\57\116\1\117"+
    "\2\116\57\120\1\0\1\121\1\120\2\0\2\50\1\0"+
    "\2\50\2\0\1\50\1\0\1\50\1\0\25\50\7\0"+
    "\1\50\4\0\1\50\4\0\1\122\1\50\1\51\1\0"+
    "\2\50\2\0\1\50\1\0\1\50\1\0\25\50\7\0"+
    "\1\50\4\0\1\50\4\0\1\123\1\0\1\123\57\0"+
    "\1\124\1\0\1\124\7\0\1\125\50\0\2\50\1\126"+
    "\2\50\2\0\1\50\1\126\1\50\1\0\25\50\7\0"+
    "\1\50\4\0\1\50\4\0\1\56\1\0\1\56\1\0"+
    "\1\127\1\130\1\0\1\131\52\0\1\61\1\0\1\61"+
    "\1\132\4\0\1\133\1\132\1\125\3\0\1\133\44\0"+
    "\2\55\1\0\2\55\2\0\1\55\1\0\1\55\1\0"+
    "\1\55\1\134\23\55\7\0\1\55\4\0\1\55\5\0"+
    "\2\55\1\0\2\55\2\0\1\55\1\0\1\55\1\0"+
    "\15\55\1\75\7\55\7\0\1\55\4\0\1\55\5\0"+
    "\2\55\1\0\2\55\2\0\1\55\1\0\1\55\1\0"+
    "\2\55\1\135\4\55\1\136\15\55\7\0\1\55\4\0"+
    "\1\55\5\0\2\55\1\0\2\55\2\0\1\55\1\0"+
    "\1\55\1\0\1\55\1\137\11\55\1\140\11\55\7\0"+
    "\1\55\4\0\1\55\5\0\2\55\1\0\2\55\2\0"+
    "\1\55\1\0\1\55\1\0\13\55\1\141\11\55\7\0"+
    "\1\55\4\0\1\55\5\0\2\55\1\0\2\55\2\0"+
    "\1\55\1\0\1\55\1\0\4\55\1\142\20\55\7\0"+
    "\1\55\4\0\1\55\5\0\2\55\1\0\2\55\2\0"+
    "\1\55\1\0\1\55\1\0\20\55\1\100\4\55\7\0"+
    "\1\55\4\0\1\55\5\0\2\55\1\0\2\55\2\0"+
    "\1\55\1\0\1\55\1\0\2\55\1\143\22\55\7\0"+
    "\1\55\4\0\1\55\5\0\2\55\1\0\2\55\2\0"+
    "\1\55\1\0\1\55\1\0\1\106\24\55\7\0\1\55"+
    "\4\0\1\55\5\0\2\55\1\0\2\55\2\0\1\55"+
    "\1\0\1\55\1\0\12\55\1\144\12\55\7\0\1\55"+
    "\4\0\1\55\5\0\2\55\1\0\2\55\2\0\1\55"+
    "\1\0\1\55\1\0\21\55\1\145\3\55\7\0\1\55"+
    "\4\0\1\55\5\0\2\55\1\0\2\55\2\0\1\55"+
    "\1\0\1\55\1\0\4\55\1\75\20\55\7\0\1\55"+
    "\4\0\1\55\5\0\2\55\1\0\2\55\2\0\1\55"+
    "\1\0\1\55\1\0\17\55\1\146\5\55\7\0\1\55"+
    "\4\0\1\55\5\0\2\55\1\0\2\55\2\0\1\55"+
    "\1\0\1\55\1\0\10\55\1\100\5\55\1\100\6\55"+
    "\7\0\1\55\4\0\1\55\5\0\2\55\1\0\2\55"+
    "\2\0\1\55\1\0\1\55\1\0\11\55\1\147\13\55"+
    "\7\0\1\55\4\0\1\55\5\0\2\55\1\0\2\55"+
    "\2\0\1\55\1\0\1\55\1\0\3\55\1\100\21\55"+
    "\7\0\1\55\4\0\1\55\5\0\2\55\1\0\2\55"+
    "\2\0\1\55\1\0\1\55\1\0\12\55\1\150\12\55"+
    "\7\0\1\55\4\0\1\55\5\0\2\55\1\0\2\55"+
    "\2\0\1\55\1\0\1\55\1\0\1\55\1\151\23\55"+
    "\7\0\1\55\4\0\1\55\5\0\2\55\1\0\2\55"+
    "\2\0\1\55\1\0\1\55\1\0\13\55\1\152\11\55"+
    "\7\0\1\55\4\0\1\55\5\0\2\55\1\0\2\55"+
    "\2\0\1\55\1\0\1\55\1\0\2\55\1\153\22\55"+
    "\7\0\1\55\4\0\1\55\5\0\2\55\1\0\2\55"+
    "\2\0\1\55\1\0\1\55\1\0\11\55\1\154\13\55"+
    "\7\0\1\55\4\0\1\55\5\0\2\55\1\0\2\55"+
    "\2\0\1\55\1\0\1\55\1\0\4\55\1\155\20\55"+
    "\7\0\1\55\4\0\1\55\5\0\2\55\1\0\2\55"+
    "\2\0\1\55\1\0\1\55\1\0\13\55\1\156\11\55"+
    "\7\0\1\55\4\0\1\55\3\0\57\116\1\157\2\116"+
    "\57\0\1\160\3\0\1\122\1\0\1\122\57\0\1\123"+
    "\1\0\1\123\2\0\1\130\54\0\1\124\1\0\1\124"+
    "\1\161\4\0\1\162\1\161\1\125\3\0\1\162\43\0"+
    "\1\163\1\0\1\163\57\0\1\164\1\0\1\164\57\0"+
    "\1\165\1\0\1\165\7\0\1\125\47\0\1\163\1\0"+
    "\1\163\5\0\1\126\5\0\1\126\46\0\1\126\5\0"+
    "\1\126\1\125\50\0\2\55\1\0\2\55\2\0\1\55"+
    "\1\0\1\55\1\0\2\55\1\166\22\55\7\0\1\55"+
    "\4\0\1\55\5\0\2\55\1\0\2\55\2\0\1\55"+
    "\1\0\1\55\1\0\7\55\1\100\15\55\7\0\1\55"+
    "\4\0\1\55\5\0\2\55\1\0\2\55\2\0\1\55"+
    "\1\0\1\55\1\0\2\55\1\167\22\55\7\0\1\55"+
    "\4\0\1\55\5\0\2\55\1\0\2\55\2\0\1\55"+
    "\1\0\1\55\1\0\2\55\1\100\22\55\7\0\1\55"+
    "\4\0\1\55\5\0\2\55\1\0\2\55\2\0\1\55"+
    "\1\0\1\55\1\0\16\55\1\100\6\55\7\0\1\55"+
    "\4\0\1\55\5\0\2\55\1\0\2\55\2\0\1\55"+
    "\1\0\1\55\1\0\1\55\1\137\23\55\7\0\1\55"+
    "\4\0\1\55\5\0\2\55\1\0\2\55\2\0\1\55"+
    "\1\0\1\55\1\0\14\55\1\170\10\55\7\0\1\55"+
    "\4\0\1\55\5\0\2\55\1\0\2\55\2\0\1\55"+
    "\1\0\1\55\1\0\1\171\24\55\7\0\1\55\4\0"+
    "\1\55\5\0\2\55\1\0\2\55\2\0\1\55\1\0"+
    "\1\55\1\0\4\55\1\172\20\55\7\0\1\55\4\0"+
    "\1\55\5\0\2\55\1\0\2\55\2\0\1\55\1\0"+
    "\1\55\1\0\5\55\1\173\17\55\7\0\1\55\4\0"+
    "\1\55\5\0\2\55\1\0\2\55\2\0\1\55\1\0"+
    "\1\55\1\0\11\55\1\166\13\55\7\0\1\55\4\0"+
    "\1\55\5\0\2\55\1\0\2\55\2\0\1\55\1\0"+
    "\1\55\1\0\21\55\1\100\3\55\7\0\1\55\4\0"+
    "\1\55\5\0\2\55\1\0\2\55\2\0\1\55\1\0"+
    "\1\55\1\0\1\174\24\55\7\0\1\55\4\0\1\55"+
    "\5\0\2\55\1\0\2\55\2\0\1\55\1\0\1\55"+
    "\1\0\1\55\1\100\23\55\7\0\1\55\4\0\1\55"+
    "\5\0\2\55\1\0\2\55\2\0\1\55\1\0\1\55"+
    "\1\0\12\55\1\175\12\55\7\0\1\55\4\0\1\55"+
    "\5\0\2\55\1\0\2\55\2\0\1\55\1\0\1\55"+
    "\1\0\10\55\1\176\14\55\7\0\1\55\4\0\1\55"+
    "\5\0\2\55\1\0\2\55\2\0\1\55\1\0\1\55"+
    "\1\0\5\55\1\177\17\55\7\0\1\55\4\0\1\55"+
    "\5\0\2\55\1\0\2\55\2\0\1\55\1\0\1\55"+
    "\1\0\24\55\1\100\7\0\1\55\4\0\1\55\5\0"+
    "\2\55\1\0\2\55\2\0\1\55\1\0\1\55\1\0"+
    "\10\55\1\137\14\55\7\0\1\55\4\0\1\55\3\0"+
    "\57\160\1\200\2\160\11\0\1\201\5\0\1\201\43\0"+
    "\1\202\1\0\1\202\1\126\5\0\1\126\1\125\47\0"+
    "\1\163\1\0\1\163\7\0\1\125\47\0\1\164\1\0"+
    "\1\164\2\0\1\130\54\0\1\165\1\0\1\165\1\203"+
    "\4\0\1\204\1\203\1\125\3\0\1\204\44\0\2\55"+
    "\1\0\2\55\2\0\1\55\1\0\1\55\1\0\3\55"+
    "\1\175\21\55\7\0\1\55\4\0\1\55\5\0\2\55"+
    "\1\0\2\55\2\0\1\55\1\0\1\55\1\0\17\55"+
    "\1\175\5\55\7\0\1\55\4\0\1\55\5\0\2\55"+
    "\1\0\2\55\2\0\1\55\1\0\1\55\1\0\3\55"+
    "\1\205\21\55\7\0\1\55\4\0\1\55\5\0\2\55"+
    "\1\0\2\55\2\0\1\55\1\0\1\55\1\0\6\55"+
    "\1\100\16\55\7\0\1\55\4\0\1\55\5\0\2\55"+
    "\1\0\2\55\2\0\1\55\1\0\1\55\1\0\13\55"+
    "\1\206\11\55\7\0\1\55\4\0\1\55\5\0\2\55"+
    "\1\0\2\55\2\0\1\55\1\0\1\55\1\0\15\55"+
    "\1\207\7\55\7\0\1\55\4\0\1\55\5\0\2\55"+
    "\1\0\2\55\2\0\1\55\1\0\1\55\1\0\10\55"+
    "\1\210\14\55\7\0\1\55\4\0\1\55\5\0\2\55"+
    "\1\0\2\55\2\0\1\55\1\0\1\55\1\0\4\55"+
    "\1\100\20\55\7\0\1\55\4\0\1\55\5\0\2\55"+
    "\1\0\2\55\2\0\1\55\1\0\1\55\1\0\15\55"+
    "\1\100\7\55\7\0\1\55\4\0\1\55\5\0\2\55"+
    "\1\0\2\55\2\0\1\55\1\0\1\55\1\0\1\211"+
    "\24\55\7\0\1\55\4\0\1\55\62\0\1\212\3\0"+
    "\1\201\1\0\1\201\57\0\1\202\1\0\1\202\7\0"+
    "\1\125\57\0\1\202\5\0\1\202\43\0\1\201\1\0"+
    "\1\201\7\0\1\125\50\0\2\55\1\0\2\55\2\0"+
    "\1\55\1\0\1\55\1\0\12\55\1\100\12\55\7\0"+
    "\1\55\4\0\1\55\5\0\2\55\1\0\2\55\2\0"+
    "\1\55\1\0\1\55\1\0\12\55\1\213\12\55\7\0"+
    "\1\55\4\0\1\55\5\0\2\55\1\0\2\55\2\0"+
    "\1\55\1\0\1\55\1\0\1\100\24\55\7\0\1\55"+
    "\4\0\1\55\5\0\2\55\1\0\2\55\2\0\1\55"+
    "\1\0\1\55\1\0\10\55\1\70\14\55\7\0\1\55"+
    "\4\0\1\55\5\0\2\55\1\0\2\55\2\0\1\55"+
    "\1\0\1\55\1\0\10\55\1\100\14\55\7\0\1\55"+
    "\4\0\1\55\62\0\1\157\4\0\2\55\1\0\2\55"+
    "\2\0\1\55\1\0\1\55\1\0\14\55\1\137\10\55"+
    "\7\0\1\55\4\0\1\55\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5900];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\25\1\1\11\1\1\2\11"+
    "\1\1\1\11\5\1\1\0\4\1\1\0\1\11\1\0"+
    "\32\1\2\11\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\11\2\0\1\11\1\1\2\0\23\1\1\11\2\0"+
    "\1\1\1\0\14\1\1\0\2\1\1\0\6\1\1\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;
    public int linea() {return yyline+1;}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 380) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 21: break;
          case 2: 
            { lexeme=yytext(); return Numero_Entero;
            }
          case 22: break;
          case 3: 
            { lexeme=yytext(); return operador_aritmetico;
            }
          case 23: break;
          case 4: 
            { /*Ignore*/
            }
          case 24: break;
          case 5: 
            { lexeme=yytext(); return operador_asignativo;
            }
          case 25: break;
          case 6: 
            { lexeme=yytext(); return operador_comparativo;
            }
          case 26: break;
          case 7: 
            { lexeme=yytext(); return operador_bits;
            }
          case 27: break;
          case 8: 
            { lexeme=yytext(); return separador_coma;
            }
          case 28: break;
          case 9: 
            { lexeme=yytext(); return separador_dos_puntos;
            }
          case 29: break;
          case 10: 
            { lexeme=yytext(); return contenedor;
            }
          case 30: break;
          case 11: 
            { lexeme=yytext(); return Error_Identificador;
            }
          case 31: break;
          case 12: 
            { lexeme=yytext(); return Numero_Flotante;
            }
          case 32: break;
          case 13: 
            { lexeme=yytext(); return Identificador;
            }
          case 33: break;
          case 14: 
            { lexeme=yytext(); return operador_logico;
            }
          case 34: break;
          case 15: 
            { lexeme=yytext(); return comparador_identidad;
            }
          case 35: break;
          case 16: 
            { lexeme=yytext(); return palabra_reservada;
            }
          case 36: break;
          case 17: 
            { lexeme=yytext(); return separador_tab;
            }
          case 37: break;
          case 18: 
            { lexeme=yytext(); return literal_string;
            }
          case 38: break;
          case 19: 
            { lexeme=yytext(); return Numero_Complejo;
            }
          case 39: break;
          case 20: 
            { lexeme=yytext(); return Numero_Long;
            }
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
