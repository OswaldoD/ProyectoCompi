/* The following code was generated by JFlex 1.6.1 */

package proyectocompi.jflex;
import static proyectocompi.jflex.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>G:/Bibliotecas/Documentos/NetBeansProjects/ProyectoCompi/src/proyectocompi/jflex/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\54\1\13\1\64\1\64\1\64\22\0\1\55\1\45\1\0"+
    "\1\63\1\0\1\43\1\50\1\60\1\56\1\56\1\5\1\11\1\52"+
    "\1\2\1\7\1\42\12\14\1\53\1\0\1\46\1\44\1\47\2\0"+
    "\4\6\1\10\1\62\3\6\1\12\1\6\1\4\7\6\1\61\6\6"+
    "\1\57\1\6\1\57\1\51\1\6\1\6\1\15\1\22\1\24\1\32"+
    "\1\17\1\33\1\37\1\41\1\30\1\12\1\23\1\25\1\36\1\27"+
    "\1\26\1\34\1\6\1\20\1\16\1\21\1\31\1\6\1\40\1\3"+
    "\1\35\1\6\1\56\1\50\1\56\1\50\6\0\1\64\u05da\0\12\1"+
    "\206\0\12\1\306\0\12\1\u019c\0\12\1\166\0\12\1\166\0\12\1"+
    "\166\0\12\1\166\0\12\1\166\0\12\1\166\0\12\1\166\0\12\1"+
    "\166\0\12\1\166\0\12\1\140\0\12\1\166\0\12\1\106\0\12\1"+
    "\u0116\0\12\1\106\0\12\1\u0746\0\12\1\46\0\12\1\u012c\0\12\1"+
    "\200\0\12\1\246\0\12\1\6\0\12\1\266\0\12\1\126\0\12\1"+
    "\206\0\12\1\6\0\12\1\u03ce\0\1\64\1\64\u85f6\0\12\1\u02a6\0"+
    "\12\1\46\0\12\1\306\0\12\1\26\0\12\1\126\0\12\1\u0196\0"+
    "\12\1\u5316\0\12\1\u0586\0\12\1\u0bbc\0\12\1\200\0\12\1\74\0"+
    "\12\1\220\0\12\1\u0116\0\12\1\u01d6\0\12\1\u0176\0\12\1\146\0"+
    "\12\1\u0216\0\12\1\u5176\0\12\1\346\0\12\1\u6c74\0\62\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\3\1\1\1\3"+
    "\1\4\20\1\1\3\1\5\1\1\2\6\2\7\1\10"+
    "\1\11\1\12\2\13\3\1\1\4\2\14\1\0\1\15"+
    "\1\14\1\2\1\0\1\5\1\16\1\0\13\16\1\17"+
    "\1\16\1\20\1\21\13\16\1\6\1\0\1\22\2\16"+
    "\1\2\1\0\1\15\1\23\2\0\1\24\1\15\2\0"+
    "\23\16\1\22\1\0\2\16\1\0\1\15\1\0\1\2"+
    "\1\15\12\16\1\0\1\25\2\15\1\0\1\15\5\16"+
    "\1\0\1\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\65\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\u04f8\0\u052d\0\u052d\0\u0562\0\u0597\0\65\0\324"+
    "\0\65\0\65\0\65\0\65\0\324\0\u05cc\0\u0601\0\u0636"+
    "\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u013e"+
    "\0\65\0\324\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7"+
    "\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\324\0\u0a5a"+
    "\0\324\0\324\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98"+
    "\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\65\0\u0cd6\0\u0d0b"+
    "\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\65\0\u0e49\0\u0e7e"+
    "\0\65\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1"+
    "\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199"+
    "\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\65"+
    "\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4"+
    "\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c"+
    "\0\u1691\0\u16c6\0\u16fb\0\324\0\u1730\0\u1765\0\u179a\0\u17cf"+
    "\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\5\1\7\1\5"+
    "\1\10\1\5\1\11\1\3\1\12\1\5\1\13\1\14"+
    "\1\15\1\16\1\5\1\17\1\20\1\21\1\22\1\23"+
    "\1\5\1\24\1\25\1\26\1\27\1\5\1\30\1\31"+
    "\1\5\1\32\1\10\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\11\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\67\0\1\3\1\0\1\52\1\53"+
    "\1\54\1\53\1\55\1\56\1\0\1\53\1\0\1\3"+
    "\2\53\1\56\22\53\7\0\1\53\5\0\1\53\1\0"+
    "\2\53\3\0\1\57\5\0\1\60\4\0\1\57\27\0"+
    "\1\61\23\0\2\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\26\62\7\0\1\62\5\0\1\62\1\0"+
    "\2\62\7\0\1\10\36\0\1\61\21\0\1\63\12\0"+
    "\1\63\114\0\1\61\23\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\2\62\1\64\10\62\1\65"+
    "\12\62\7\0\1\62\5\0\1\62\1\0\2\62\5\0"+
    "\1\66\1\62\1\0\1\62\1\0\1\62\1\0\1\62"+
    "\1\0\11\62\1\67\14\62\7\0\1\62\5\0\1\62"+
    "\1\0\2\62\5\0\2\62\1\0\1\62\1\0\1\62"+
    "\1\0\1\62\1\0\1\62\1\70\1\62\1\71\22\62"+
    "\7\0\1\62\5\0\1\62\1\0\2\62\5\0\2\62"+
    "\1\0\1\62\1\0\1\62\1\0\1\62\1\0\4\62"+
    "\1\72\21\62\7\0\1\62\5\0\1\62\1\0\2\62"+
    "\5\0\2\62\1\0\1\62\1\0\1\62\1\0\1\62"+
    "\1\0\4\62\1\73\21\62\7\0\1\62\5\0\1\62"+
    "\1\0\2\62\5\0\2\62\1\0\1\62\1\0\1\62"+
    "\1\0\1\62\1\0\11\62\1\74\1\75\13\62\7\0"+
    "\1\62\5\0\1\62\1\0\2\62\5\0\2\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\1\62\1\76"+
    "\24\62\7\0\1\62\5\0\1\62\1\0\2\62\5\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\4\62\1\77\21\62\7\0\1\62\5\0\1\62\1\0"+
    "\2\62\5\0\2\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\12\62\1\100\13\62\7\0\1\62\5\0"+
    "\1\62\1\0\2\62\5\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\2\62\1\101\10\62\1\101"+
    "\3\62\1\102\2\62\1\103\3\62\7\0\1\62\5\0"+
    "\1\62\1\0\2\62\5\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\3\62\1\104\22\62\7\0"+
    "\1\62\5\0\1\62\1\0\2\62\5\0\2\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\4\62\1\105"+
    "\5\62\1\106\1\62\1\107\11\62\7\0\1\62\5\0"+
    "\1\62\1\0\2\62\5\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\110\2\62\1\111"+
    "\21\62\7\0\1\62\5\0\1\62\1\0\2\62\5\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\14\62\1\112\11\62\7\0\1\62\5\0\1\62\1\0"+
    "\2\62\5\0\2\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\11\62\1\113\14\62\7\0\1\62\5\0"+
    "\1\62\1\0\2\62\5\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\14\62\1\114\10\62\1\115"+
    "\7\0\1\62\5\0\1\62\1\0\2\62\44\0\1\10"+
    "\1\0\1\61\64\0\1\116\64\0\1\116\1\0\1\37"+
    "\1\116\61\0\1\116\2\0\1\37\15\0\60\117\1\120"+
    "\4\117\3\0\2\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\4\62\1\121\21\62\7\0\1\62\5\0"+
    "\1\62\1\0\2\62\5\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\122\24\62\7\0"+
    "\1\62\5\0\1\62\1\0\2\62\2\0\13\51\1\0"+
    "\50\51\2\0\1\123\1\0\2\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\52\25\53\7\0\1\53"+
    "\5\0\1\53\1\0\2\53\5\0\2\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\26\53\7\0\1\53"+
    "\5\0\1\53\1\0\2\53\3\0\1\124\12\0\1\124"+
    "\51\0\1\125\10\0\1\126\1\0\1\125\52\0\1\127"+
    "\2\53\1\0\1\53\1\0\1\53\1\127\1\53\1\0"+
    "\26\53\7\0\1\53\5\0\1\53\1\0\2\53\3\0"+
    "\1\57\1\0\1\130\1\131\2\0\1\132\4\0\1\57"+
    "\51\0\1\63\1\133\5\0\1\134\1\133\1\126\1\0"+
    "\1\63\2\0\1\134\50\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\2\62\1\135\23\62\7\0"+
    "\1\62\5\0\1\62\1\0\2\62\5\0\2\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\16\62\1\77"+
    "\7\62\7\0\1\62\5\0\1\62\1\0\2\62\5\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\3\62\1\136\4\62\1\137\15\62\7\0\1\62\5\0"+
    "\1\62\1\0\2\62\5\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\2\62\1\140\11\62\1\141"+
    "\11\62\7\0\1\62\5\0\1\62\1\0\2\62\5\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\14\62\1\142\11\62\7\0\1\62\5\0\1\62\1\0"+
    "\2\62\5\0\2\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\5\62\1\143\20\62\7\0\1\62\5\0"+
    "\1\62\1\0\2\62\5\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\21\62\1\102\4\62\7\0"+
    "\1\62\5\0\1\62\1\0\2\62\5\0\2\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\3\62\1\144"+
    "\22\62\7\0\1\62\5\0\1\62\1\0\2\62\5\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\110\24\62\7\0\1\62\5\0\1\62\1\0"+
    "\2\62\5\0\2\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\13\62\1\145\12\62\7\0\1\62\5\0"+
    "\1\62\1\0\2\62\5\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\22\62\1\146\3\62\7\0"+
    "\1\62\5\0\1\62\1\0\2\62\5\0\2\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\5\62\1\77"+
    "\20\62\7\0\1\62\5\0\1\62\1\0\2\62\5\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\20\62\1\147\5\62\7\0\1\62\5\0\1\62\1\0"+
    "\2\62\5\0\2\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\11\62\1\102\5\62\1\102\6\62\7\0"+
    "\1\62\5\0\1\62\1\0\2\62\5\0\2\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\12\62\1\150"+
    "\13\62\7\0\1\62\5\0\1\62\1\0\2\62\5\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\4\62\1\102\21\62\7\0\1\62\5\0\1\62\1\0"+
    "\2\62\5\0\2\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\13\62\1\151\12\62\7\0\1\62\5\0"+
    "\1\62\1\0\2\62\5\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\2\62\1\152\23\62\7\0"+
    "\1\62\5\0\1\62\1\0\2\62\5\0\2\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\14\62\1\153"+
    "\11\62\7\0\1\62\5\0\1\62\1\0\2\62\5\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\3\62\1\154\22\62\7\0\1\62\5\0\1\62\1\0"+
    "\2\62\5\0\2\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\12\62\1\155\13\62\7\0\1\62\5\0"+
    "\1\62\1\0\2\62\5\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\5\62\1\156\20\62\7\0"+
    "\1\62\5\0\1\62\1\0\2\62\5\0\2\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\14\62\1\157"+
    "\11\62\7\0\1\62\5\0\1\62\1\0\2\62\2\0"+
    "\60\117\1\160\4\117\60\0\1\161\7\0\2\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\15\62\1\162"+
    "\10\62\7\0\1\62\5\0\1\62\1\0\2\62\5\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\11\62\1\163\14\62\7\0\1\62\5\0\1\62\1\0"+
    "\2\62\3\0\1\123\12\0\1\123\51\0\1\124\2\0"+
    "\1\131\7\0\1\124\51\0\1\125\1\164\5\0\1\165"+
    "\1\164\1\126\1\0\1\125\2\0\1\165\46\0\1\166"+
    "\12\0\1\166\51\0\1\167\12\0\1\167\51\0\1\170"+
    "\10\0\1\126\1\0\1\170\51\0\1\166\6\0\1\127"+
    "\3\0\1\166\2\0\1\127\47\0\1\127\6\0\1\127"+
    "\1\126\55\0\2\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\171\22\62\7\0\1\62\5\0"+
    "\1\62\1\0\2\62\5\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\10\62\1\102\15\62\7\0"+
    "\1\62\5\0\1\62\1\0\2\62\5\0\2\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\3\62\1\172"+
    "\22\62\7\0\1\62\5\0\1\62\1\0\2\62\5\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\3\62\1\102\22\62\7\0\1\62\5\0\1\62\1\0"+
    "\2\62\5\0\2\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\17\62\1\102\6\62\7\0\1\62\5\0"+
    "\1\62\1\0\2\62\5\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\2\62\1\140\23\62\7\0"+
    "\1\62\5\0\1\62\1\0\2\62\5\0\2\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\15\62\1\173"+
    "\10\62\7\0\1\62\5\0\1\62\1\0\2\62\5\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\174\24\62\7\0\1\62\5\0\1\62\1\0"+
    "\2\62\5\0\2\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\5\62\1\175\20\62\7\0\1\62\5\0"+
    "\1\62\1\0\2\62\5\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\6\62\1\176\17\62\7\0"+
    "\1\62\5\0\1\62\1\0\2\62\5\0\2\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\12\62\1\171"+
    "\13\62\7\0\1\62\5\0\1\62\1\0\2\62\5\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\22\62\1\102\3\62\7\0\1\62\5\0\1\62\1\0"+
    "\2\62\5\0\2\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\177\24\62\7\0\1\62\5\0"+
    "\1\62\1\0\2\62\5\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\2\62\1\102\23\62\7\0"+
    "\1\62\5\0\1\62\1\0\2\62\5\0\2\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\13\62\1\200"+
    "\12\62\7\0\1\62\5\0\1\62\1\0\2\62\5\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\11\62\1\201\14\62\7\0\1\62\5\0\1\62\1\0"+
    "\2\62\5\0\2\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\6\62\1\202\17\62\7\0\1\62\5\0"+
    "\1\62\1\0\2\62\5\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\25\62\1\102\7\0\1\62"+
    "\5\0\1\62\1\0\2\62\5\0\2\62\1\0\1\62"+
    "\1\0\1\62\1\0\1\62\1\0\11\62\1\140\14\62"+
    "\7\0\1\62\5\0\1\62\1\0\2\62\2\0\60\161"+
    "\1\203\4\161\3\0\2\62\1\0\1\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\204\22\62\7\0\1\62"+
    "\5\0\1\62\1\0\2\62\5\0\2\62\1\0\1\62"+
    "\1\0\1\62\1\0\1\62\1\0\2\62\1\162\23\62"+
    "\7\0\1\62\5\0\1\62\1\0\2\62\12\0\1\205"+
    "\6\0\1\205\46\0\1\206\1\127\6\0\1\127\1\126"+
    "\1\0\1\206\51\0\1\166\10\0\1\126\1\0\1\166"+
    "\51\0\1\167\2\0\1\131\7\0\1\167\51\0\1\170"+
    "\1\207\5\0\1\210\1\207\1\126\1\0\1\170\2\0"+
    "\1\210\50\0\2\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\4\62\1\200\21\62\7\0\1\62\5\0"+
    "\1\62\1\0\2\62\5\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\20\62\1\200\5\62\7\0"+
    "\1\62\5\0\1\62\1\0\2\62\5\0\2\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\4\62\1\211"+
    "\21\62\7\0\1\62\5\0\1\62\1\0\2\62\5\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\7\62\1\102\16\62\7\0\1\62\5\0\1\62\1\0"+
    "\2\62\5\0\2\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\14\62\1\212\11\62\7\0\1\62\5\0"+
    "\1\62\1\0\2\62\5\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\16\62\1\213\7\62\7\0"+
    "\1\62\5\0\1\62\1\0\2\62\5\0\2\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\11\62\1\214"+
    "\14\62\7\0\1\62\5\0\1\62\1\0\2\62\5\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\5\62\1\102\20\62\7\0\1\62\5\0\1\62\1\0"+
    "\2\62\5\0\2\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\16\62\1\102\7\62\7\0\1\62\5\0"+
    "\1\62\1\0\2\62\5\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\215\24\62\7\0"+
    "\1\62\5\0\1\62\1\0\2\62\62\0\1\216\5\0"+
    "\1\205\12\0\1\205\51\0\1\206\10\0\1\126\1\0"+
    "\1\206\60\0\1\206\6\0\1\206\46\0\1\205\10\0"+
    "\1\126\1\0\1\205\53\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\13\62\1\102\12\62\7\0"+
    "\1\62\5\0\1\62\1\0\2\62\5\0\2\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\13\62\1\217"+
    "\12\62\7\0\1\62\5\0\1\62\1\0\2\62\5\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\102\24\62\7\0\1\62\5\0\1\62\1\0"+
    "\2\62\5\0\2\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\11\62\1\72\14\62\7\0\1\62\5\0"+
    "\1\62\1\0\2\62\5\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\11\62\1\102\14\62\7\0"+
    "\1\62\5\0\1\62\1\0\2\62\62\0\1\11\7\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\15\62\1\140\10\62\7\0\1\62\5\0\1\62\1\0"+
    "\2\62\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6519];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\25\1\1\11\1\1\4\11"+
    "\7\1\1\0\3\1\1\0\1\11\1\1\1\0\32\1"+
    "\1\11\1\0\4\1\1\0\1\1\1\11\2\0\1\11"+
    "\1\1\2\0\23\1\1\11\1\0\2\1\1\0\1\1"+
    "\1\0\14\1\1\0\3\1\1\0\6\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;
    public int linea() {return yyline+1;}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 390) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 22: break;
          case 2: 
            { lexeme=yytext(); return Numero_Entero;
            }
          case 23: break;
          case 3: 
            { lexeme=yytext(); return operador_aritmetico;
            }
          case 24: break;
          case 4: 
            { /*Ignore*/
            }
          case 25: break;
          case 5: 
            { lexeme=yytext(); return operador_asignativo;
            }
          case 26: break;
          case 6: 
            { lexeme=yytext(); return operador_comparativo;
            }
          case 27: break;
          case 7: 
            { lexeme=yytext(); return operador_bits;
            }
          case 28: break;
          case 8: 
            { lexeme=yytext(); return separador_coma;
            }
          case 29: break;
          case 9: 
            { lexeme=yytext(); return separador_dos_puntos;
            }
          case 30: break;
          case 10: 
            { lexeme=yytext(); return separador_tab;
            }
          case 31: break;
          case 11: 
            { lexeme=yytext(); return contenedor;
            }
          case 32: break;
          case 12: 
            { lexeme=yytext(); return Error_Identificador;
            }
          case 33: break;
          case 13: 
            { lexeme=yytext(); return Numero_Flotante;
            }
          case 34: break;
          case 14: 
            { lexeme=yytext(); return Identificador;
            }
          case 35: break;
          case 15: 
            { lexeme=yytext(); return operador_logico;
            }
          case 36: break;
          case 16: 
            { lexeme=yytext(); return comparador_identidad;
            }
          case 37: break;
          case 17: 
            { lexeme=yytext(); return palabra_reservada;
            }
          case 38: break;
          case 18: 
            { lexeme=yytext(); return literal_string;
            }
          case 39: break;
          case 19: 
            { lexeme=yytext(); return Numero_Complejo;
            }
          case 40: break;
          case 20: 
            { lexeme=yytext(); return Numero_Long;
            }
          case 41: break;
          case 21: 
            { lexeme=yytext(); return Booleano;
            }
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
